name: Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Get repo files
      uses: actions/checkout@v1
     
    - name: Install Terraform
      uses: little-core-labs/install-terraform@v2.0.0
      with:
        version: 0.13.5

    - name: Init Terraform
      working-directory: ./demo
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: terraform init
    
    - name: Deploy Azure infrastructure
      working-directory: ./demo
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}  
        TF_VAR_subscription_id: ${{ secrets.subscription_id }}
        TF_VAR_client_id: ${{ secrets.client_id }}
        TF_VAR_client_secret: ${{ secrets.client_secret }}
        TF_VAR_tenant_id: ${{ secrets.tenant_id }}
        TF_VAR_psql_password: ${{ secrets.psql_password }} 
        TF_VAR_client_app_id: ${{ secrets.client_app_id }}
        TF_VAR_server_app_id: ${{ secrets.server_app_id }}
        TF_VAR_server_app_secret: ${{ secrets.server_app_secret }}
        TF_VAR_tenant_app_id: ${{ secrets.tenant_app_id }}
        TF_VAR_admin_group_id: ${{ secrets.admin_group_id }}
      run: terraform apply -auto-approve

    - name: Store Kubernetes config
      working-directory: ./demo
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: echo "$(terraform output kube_admin_config)" > ./kube_config

    - name: Install Helm 3
      uses: Azure/setup-helm@v1
      with:
        version: v3.1.1

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      id: install

    - name: Azure CLI login
      working-directory: ./demo
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET -t $ARM_TENANT_ID
        az account set -s $ARM_SUBSCRIPTION_ID

    - name: Deploy AAD Pod Identity
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        kubectl create namespace aadpodidentity && echo Namespace created || echo Namespace existed
        helm repo add aad-pod-identity https://raw.githubusercontent.com/Azure/aad-pod-identity/master/charts
        helm repo update
        helm upgrade -i aadpodidentity aad-pod-identity/aad-pod-identity -n aadpodidentity

    - name: Deploy cluster base configuration
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        password: ${{ secrets.password }} 
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
        INGRESS_CRT: ${{ secrets.ingress_crt_b64 }}
        INGRESS_KEY: ${{ secrets.ingress_key_b64 }}
        FACE_REGISTRY: ${{ secrets.face_registry_b64 }}
        FACE_API_ENDPOINT: ${{ secrets.face_api_endpoint }}
        FACE_API_KEY: ${{ secrets.face_api_key }}
      run: |
        helm upgrade -i baseconfig ./helm/cluster \
          --set upn=admin@tomaskubicaoffice.onmicrosoft.com \
          --set username=tomas \
          --set password=${password} \
          --set secretsReader.resourceId=$(terraform output secretsReader_resourceId) \
          --set secretsReader.clientId=$(terraform output secretsReader_clientId) \
          --set keda.resourceId=$(terraform output keda_resourceId) \
          --set keda.clientId=$(terraform output keda_clientId) \
          --set azurepolicy.resourceId=$(terraform output azurepolicy_resourceId) \
          --set azurepolicy.clientId=$(terraform output azurepolicy_clientId) \
          --set linkerdhost=linkerd.i.tomaskubica.net \
          --set istioBaseUrl=istio.cloud.tomaskubica.net \
          --set ingressCrt=${INGRESS_CRT} \
          --set ingressKey=${INGRESS_KEY} \
          --set face.registry=${FACE_REGISTRY} \
          --set face.endpoint=${FACE_API_ENDPOINT} \
          --set face.key=${FACE_API_KEY}

    # - name: Appliction Insights codeless injector
    #   working-directory: ./demo
    #   env:
    #     KUBECONFIG: "./kube_config"
    #     ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
    #     ARM_CLIENT_ID: ${{ secrets.client_id }}
    #     ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
    #     ARM_TENANT_ID: ${{ secrets.tenant_id }}
    #   run: |
    #     if helm list | grep local-forwarder
    #       then echo Already installed
    #       else
    #         sudo apt install dos2unix -y
    #         wget https://github.com/microsoft/Application-Insights-K8s-Codeless-Attach/releases/download/Beta3/init.sh 
    #         wget https://github.com/microsoft/Application-Insights-K8s-Codeless-Attach/releases/download/Beta3/helm-v0.8.4.tgz
    #         . init.sh
    #         helm upgrade -i local-forwarder ./helm-v0.8.4.tgz -f values.yaml \
    #           --set namespaces={} \
    #           --set namespaces[0].target=default \
    #           --set namespaces[0].iKey=$(terraform output appin_key)
    #     fi

    - name: Deploy KEDA
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        helm repo add kedacore https://kedacore.github.io/charts
        helm repo update
        helm upgrade -i keda kedacore/keda -n keda --set aadPodIdentity=keda

    - name: Deploy DAPR
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        helm repo add dapr https://daprio.azurecr.io/helm/v1/repo
        helm repo update
        helm upgrade -i dapr dapr/dapr -n dapr --set global.logAsJson=true

    - name: Deploy Arc for Data Services controller, SQL and PSQL
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        kubectl apply -f https://raw.githubusercontent.com/microsoft/azure_arc/master/arc_data_services/deploy/yaml/custom-resource-definitions.yaml
        kubectl apply -n arc -f https://raw.githubusercontent.com/microsoft/azure_arc/master/arc_data_services/deploy/yaml/bootstrapper.yaml
        helm upgrade -i arc -n arc ./helm/arcdata \
          --set subscriptionId=$ARM_SUBSCRIPTION_ID \
          --set resourceGroupName=$(terraform output resource_group)

    - name: Deploy Ingress controller for NGINX
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx        
        helm repo update
        helm upgrade -i ingress-nginx ingress-nginx/ingress-nginx -n ingress \
          --set controller.service.annotations."service\.beta\.kubernetes\.io\/azure-dns-label-name"=tomasclouddemo1616 \
          --set controller.podAnnotations."prometheus\.io/scrape"=true \
          --set controller.podAnnotations."prometheus\.io/port"=10254 \
          --set controller.metrics.enabled=true

    - name: Deploy Ingress controller for Azure App Gw
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
        helm repo update
        helm upgrade -i -n ingress ingress application-gateway-kubernetes-ingress/ingress-azure \
          --set appgw.name=$(terraform output appgw_name) \
          --set appgw.resourceGroup=$(terraform output resource_group) \
          --set appgw.subscriptionId=$ARM_SUBSCRIPTION_ID \
          --set appgw.usePrivateIP=False \
          --set kubernetes.watchNamespace="" \
          --set armAuth.type=aadPodIdentity \
          --set armAuth.identityResourceID=$(terraform output ingressContributor_resource_id) \
          --set armAuth.identityClientID=$(terraform output ingressContributor_client_id) \
          --set rbac.enabled=true \
          --set reconcilePeriodSeconds=60

    # - name: Deploy Linkerd service mesh
    #   working-directory: ./demo
    #   env:
    #     KUBECONFIG: "./kube_config"
    #   run: |
    #     export LINKERD_VERSION=stable-2.8.1
    #     curl -sLO "https://github.com/linkerd/linkerd2/releases/download/$LINKERD_VERSION/linkerd2-cli-$LINKERD_VERSION-linux"
    #     mv ./linkerd2-cli-$LINKERD_VERSION-linux ./linkerd
    #     chmod +x ./linkerd
    #     ./linkerd check && echo Linkerd OK || ./linkerd install | kubectl apply -f -

    - name: Deploy Istio service mesh
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        export istio_version=1.7.4
        wget https://github.com/istio/istio/releases/download/$istio_version/istioctl-$istio_version-linux-amd64.tar.gz
        tar -xvf istioctl-$istio_version-linux-amd64.tar.gz
        chmod +x ./istioctl
        ./istioctl install --set profile=demo --set values.meshConfig.outboundTrafficPolicy.mode="REGISTRY_ONLY"

    - name: Deploy Open Service Mesh
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        export osmversion=v0.5.0
        wget https://github.com/openservicemesh/osm/releases/download/$osmversion/osm-$osmversion-linux-amd64.tar.gz
        tar xvf osm-$osmversion-linux-amd64.tar.gz
        sudo mv ./linux-amd64/osm .
        chmod +x ./osm
        ./osm install --enable-grafana

    - name: Deploy hybrid AI demo
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        helm upgrade -i ai ./helm/ai --set baseUrl=ai.i.tomaskubica.net

    - name: Deploy API Management demo
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        export url="https://management.azure.com$(terraform output apim_gw_id)/generateToken?api-version=2019-12-01"
        export token="GatewayKey $(az rest -u $url -m post -b '{"keyType": "primary", "expiry": "'$(date -d "+10 days" -Iseconds)'"}' --query value -o tsv)"
        export endpoint="$(terraform output apim_mgmt_url)$(terraform output apim_id)?api-version=2019-12-01"
        helm upgrade -i apim ./helm/apim \
          --set apim.endpoint="$endpoint" \
          --set apim.token="$token"

    - name: Deploy Grafana+Prometheus
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        GRAFANA_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        GRAFANA_CLIENT_ID: ${{ secrets.reader_client_id }}
        GRAFANA_CLIENT_SECRET: ${{ secrets.reader_client_secret }}
        GRAFANA_TENANT_ID: ${{ secrets.tenant_id }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add stable https://charts.helm.sh/stable
        helm repo update
        helm upgrade -i grafana grafana/grafana -n grafana -f helm/cluster/grafana-values.yaml \
          --set subscriptionId=$GRAFANA_SUBSCRIPTION_ID \
          --set clientId=$GRAFANA_CLIENT_ID \
          --set clientSecret=$GRAFANA_CLIENT_SECRET \
          --set tenantId=$GRAFANA_TENANT_ID \
          --set workspaceId=$(terraform output workspace_id)
        helm upgrade -i prometheus prometheus-community/prometheus -n prometheus -f helm/cluster/prometheus-values.yaml
    
    - name: Build apps
      working-directory: ./demo
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        registry=$(terraform output registry_name)
        version=$(cat version)
        az acr repository show -n $registry --image myappspa:$version && echo Image exists || az acr build -r $registry --image myappspa:$version ./src/myappspa
        az acr repository show -n $registry --image myapptodo:$version && echo Image exists || az acr build -r $registry --image myapptodo:$version ./src/myapptodo
        az acr repository show -n $registry --image myappnode:$version && echo Image exists || az acr build -r $registry --image myappnode:$version ./src/myappnode
        az acr repository show -n $registry --image todogen:$version && echo Image exists || az acr build -r $registry --image todogen:$version ./src/todoGen
        az acr repository show -n $registry --image daprdemo:$version && echo Image exists || az acr build -r $registry --image daprdemo:$version ./src/daprdemo
        az acr repository show -n $registry --image tracing:$version && echo Image exists || az acr build -r $registry --image tracing:$version ./src/tracing
        az acr repository show -n $registry --image opentelemetry:$version && echo Image exists || az acr build -r $registry --image opentelemetry:$version ./src/opentelemetry
        az acr repository show -n $registry --image opentelemetry-tfgen:$version && echo Image exists || az acr build -r $registry --image opentelemetry-tfgen:$version ./src/opentelemetry-tfgen

    - name: Deploy todo application
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        registry_name=$(terraform output registry_name)
        helm upgrade -i todo ./helm/myapp \
          --set appspa.image.repository=${registry_name}.azurecr.io/myappspa \
          --set appspa.image.tag=$(cat version) \
          --set apptodo.image.repository=${registry_name}.azurecr.io/myapptodo \
          --set apptodo.image.tag=$(cat version) \
          --set appnode.image.repository=${registry_name}.azurecr.io/myappnode \
          --set appnode.image.tag=$(cat version) \
          --set appgen.image.repository=${registry_name}.azurecr.io/todogen \
          --set appgen.image.tag=$(cat version) \
          --set apphost=cloud.tomaskubica.net \
          --set tlsSecretName=tomaskubicain \
          --set keyvault.name=$(terraform output keyvault_name) \
          --set keyvault.tenant=$(terraform output keyvault_tenantid) \
          --set keyvault.key=$(terraform output keyvault_psql_keyname) \
          --set keyvault.sbkey=servicebus-todo-connection

    # - name: Deploy todo application with Linkerd
    #   working-directory: ./demo
    #   env:
    #     KUBECONFIG: "./kube_config"
    #     ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
    #     ARM_CLIENT_ID: ${{ secrets.client_id }}
    #     ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
    #     ARM_TENANT_ID: ${{ secrets.tenant_id }}
    #   run: |
    #     registry_name=$(terraform output registry_name)
    #     helm upgrade -i todo ./helm/myapp -n linkerd-demo \
    #       --set appspa.image.repository=${registry_name}.azurecr.io/myappspa \
    #       --set appspa.image.tag=$(cat version) \
    #       --set apptodo.image.repository=${registry_name}.azurecr.io/myapptodo \
    #       --set apptodo.image.tag=$(cat version) \
    #       --set appnode.image.repository=${registry_name}.azurecr.io/myappnode \
    #       --set appnode.image.tag=$(cat version) \
    #       --set appgen.image.repository=${registry_name}.azurecr.io/todogen \
    #       --set appgen.image.tag=$(cat version) \
    #       --set apphost=linkerd.cloud.tomaskubica.net \
    #       --set tlsSecretName=tomaskubicain \
    #       --set keyvault.name=$(terraform output keyvault_name) \
    #       --set keyvault.tenant=$(terraform output keyvault_tenantid) \
    #       --set keyvault.key=$(terraform output keyvault_psql_keyname) \
    #       --set keyvault.sbkey=servicebus-todo-connection

    - name: Deploy todo application with Istio
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        registry_name=$(terraform output registry_name)
        helm upgrade -i todo ./helm/myapp -n istio-demo \
          --set appspa.image.repository=${registry_name}.azurecr.io/myappspa \
          --set appspa.image.tag=$(cat version) \
          --set apptodo.image.repository=${registry_name}.azurecr.io/myapptodo \
          --set apptodo.image.tag=$(cat version) \
          --set appnode.image.repository=${registry_name}.azurecr.io/myappnode \
          --set appnode.image.tag=$(cat version) \
          --set appgen.image.repository=${registry_name}.azurecr.io/todogen \
          --set appgen.image.tag=$(cat version) \
          --set apphost=todo.istio.cloud.tomaskubica.net \
          --set tlsSecretName=tomaskubicain \
          --set keyvault.name=$(terraform output keyvault_name) \
          --set keyvault.tenant=$(terraform output keyvault_tenantid) \
          --set keyvault.key=$(terraform output keyvault_psql_keyname) \
          --set keyvault.sbkey=servicebus-todo-connection

    - name: Deploy todo application with Open Service Mesh
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        registry_name=$(terraform output registry_name)
        helm upgrade -i todo ./helm/myapp -n osm-demo \
          --set appspa.image.repository=${registry_name}.azurecr.io/myappspa \
          --set appspa.image.tag=$(cat version) \
          --set apptodo.image.repository=${registry_name}.azurecr.io/myapptodo \
          --set apptodo.image.tag=$(cat version) \
          --set appnode.image.repository=${registry_name}.azurecr.io/myappnode \
          --set appnode.image.tag=$(cat version) \
          --set appgen.image.repository=${registry_name}.azurecr.io/todogen \
          --set appgen.image.tag=$(cat version) \
          --set apphost=todo.osm.cloud.tomaskubica.net \
          --set tlsSecretName=tomaskubicain \
          --set keyvault.name=$(terraform output keyvault_name) \
          --set keyvault.tenant=$(terraform output keyvault_tenantid) \
          --set keyvault.key=$(terraform output keyvault_psql_keyname) \
          --set keyvault.sbkey=servicebus-todo-connection

    # - name: Deploy Linkerd demo
    #   working-directory: ./demo
    #   env:
    #     KUBECONFIG: "./kube_config"
    #     ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
    #     ARM_CLIENT_ID: ${{ secrets.client_id }}
    #     ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
    #     ARM_TENANT_ID: ${{ secrets.tenant_id }}
    #   run: |
    #     helm upgrade -i linkerd-demo ./helm/linkerd-demo -n linkerd-demo \
    #       --set appin_key=$(terraform output appin_linkerd_key)

    - name: Deploy Istio demo
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        helm upgrade -i istio-demo ./helm/istio-demo -n istio-demo

    - name: Deploy Bookstore demo on Open Service Mesh
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        helm upgrade -i osm-bookstore ./helm/bookstore -n osm-demo \
          --set namespace=osm-demo \
          --set thief=false \
          --set weight.v1=100 \
          --set weight.v2=0 

    - name: Deploy distributed tracing demo
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        registry_name=$(terraform output registry_name)
        helm upgrade -i tracing ./helm/opentelemetry -n default \
          --set repository=${registry_name}.azurecr.io/opentelemetry \
          --set tfgenRepository=${registry_name}.azurecr.io/opentelemetry-tfgen \
          --set tag=$(cat version) \
          --set appin_key=$(terraform output appin_opentelemetry_key) \
          --set mysql_password=Azure12345678

    # - name: Deploy distributed tracing demo with Linkerd
    #   working-directory: ./demo
    #   env:
    #     KUBECONFIG: "./kube_config"
    #     ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
    #     ARM_CLIENT_ID: ${{ secrets.client_id }}
    #     ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
    #     ARM_TENANT_ID: ${{ secrets.tenant_id }}
    #   run: |
    #     registry_name=$(terraform output registry_name)
    #     helm upgrade -i tracing-linkerd ./helm/tracing -n linkerd-demo \
    #       --set repository=${registry_name}.azurecr.io/tracing \
    #       --set tag=$(cat version) \
    #       --set collector=linkerd-localforwarder:55678

    - name: Deploy Flagger
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        helm repo add flagger https://flagger.app
        helm upgrade -i flagger flagger/flagger -n canary \
          --set meshProvider=nginx \
          --set metricsServer="http://prometheus-server\.prometheus:9090"
        # helm upgrade -i flagger-loadtester flagger/loadtester -n canary

    - name: Deploy DAPR demo
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        registry_name=$(terraform output registry_name)
        helm upgrade -i dapr-demo ./helm/dapr-demo -n dapr \
          --set serviceBus.namespace=$(terraform output servicebus_namespace) \
          --set blob.storageAccount=$(terraform output storage_account) \
          --set blob.container=daprcontainer \
          --set cosmos.host=$(terraform output cosmos_host) \
          --set cosmos.db=$(terraform output cosmos_db) \
          --set cosmos.col=$(terraform output cosmos_col) \
          --set appnodes.image.repository=${registry_name}.azurecr.io/daprdemo \
          --set appnodes.image.tag=$(cat version) \
          --set keyVault.name=$(terraform output keyvault_name) \
          --set keyVault.readerClientId=$(terraform output secretsReader_clientId) \
          --set appin_key=$(terraform output appin_dapr_key)

    - name: Deploy canary demos
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        helm upgrade -i canary ./helm/canary -n canary -f ./helm/canary/values.yaml

    - name: Deploy Azure Policy demo
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
        ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
        ARM_CLIENT_ID: ${{ secrets.client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
        ARM_TENANT_ID: ${{ secrets.tenant_id }}
      run: |
        helm upgrade -i policy-demo ./helm/policy-demo -n policy \
          --set image.repository=$(terraform output registry_name).azurecr.io/myappspa \
          --set image.tag=$(cat version)

    - name: Deploy IIS application
      working-directory: ./demo
      env:
        KUBECONFIG: "./kube_config"
      run: |
        helm upgrade -i -n windows iis ./helm/windows --set apphost=iis.cloud.tomaskubica.net